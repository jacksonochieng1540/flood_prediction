# Generated by Django 5.2.6 on 2025-10-01 14:00

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('elevation', models.FloatField(help_text='Elevation in meters')),
                ('river_basin', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ModelPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('precision', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('recall', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('f1_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('training_samples', models.IntegerField()),
                ('model_version', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Model performances',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PredictionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rainfall_mm', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('water_level_m', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('river_discharge_m3s', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('soil_moisture_percent', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('temperature_celsius', models.FloatField()),
                ('humidity_percent', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('elevation_m', models.FloatField()),
                ('slope_degree', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)])),
                ('prediction', models.BooleanField(help_text='True if flood predicted, False otherwise')),
                ('probability_flood', models.FloatField(help_text='Probability of flood occurrence (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('probability_no_flood', models.FloatField(help_text='Probability of no flood (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('risk_level', models.CharField(choices=[('very_low', 'Very Low'), ('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('confidence', models.FloatField(help_text='Model confidence in prediction', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('model_used', models.CharField(default='ensemble', max_length=50)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actual_flood_occurred', models.BooleanField(blank=True, null=True)),
                ('actual_flood_severity', models.CharField(blank=True, max_length=20)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('flood_warning', 'Flood Warning'), ('heavy_rain', 'Heavy Rain Alert'), ('river_level', 'High River Level'), ('soil_saturation', 'Soil Saturation Alert')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('message', models.TextField()),
                ('affected_area', models.CharField(max_length=200)),
                ('recommended_actions', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('prediction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='flood_prediction.predictionhistory')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('rainfall_mm', models.FloatField(help_text='Rainfall in mm', validators=[django.core.validators.MinValueValidator(0)])),
                ('temperature_celsius', models.FloatField(help_text='Temperature in Celsius')),
                ('humidity_percent', models.FloatField(help_text='Humidity percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('wind_speed_kmh', models.FloatField(help_text='Wind speed in km/h', validators=[django.core.validators.MinValueValidator(0)])),
                ('pressure_hpa', models.FloatField(help_text='Atmospheric pressure in hPa')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_data', to='flood_prediction.location')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='predictionhistory',
            index=models.Index(fields=['created_at'], name='flood_predi_created_7f075d_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionhistory',
            index=models.Index(fields=['risk_level'], name='flood_predi_risk_le_adb3b8_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionhistory',
            index=models.Index(fields=['location'], name='flood_predi_locatio_532922_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['status'], name='flood_predi_status_1d440c_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['severity'], name='flood_predi_severit_8eaf22_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['created_at'], name='flood_predi_created_1092f9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='weatherdata',
            unique_together={('location', 'timestamp')},
        ),
    ]
